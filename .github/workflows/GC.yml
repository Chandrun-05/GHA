name: Trigger Opsera GitCustodian Scan and Report to GitHub

on:
  workflow_dispatch:
  pull_request:

jobs:
  trigger-opsera-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Trigger GitCustodian Scan in Opsera
        id: trigger_scan
        run: |
          response=$(curl -s -X POST "https://app.opsera.io/api/v1/pipeline/run" \
            -H "Authorization: Bearer ${{ secrets.OPSERA_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"pipelineId": "68232d25a85372e8342b3100"}')
          
          echo "Pipeline Response: $response"
          if echo "$response" | jq . >/dev/null 2>&1; then
            run_count=$(echo "$response" | jq -r '.runCount')
            echo "run_count=$run_count" >> $GITHUB_ENV
          else
            echo "Error: Invalid JSON response. Exiting." >&2
            exit 1
          fi

  fetch-opsera-logs:
    needs: trigger-opsera-scan
    runs-on: ubuntu-latest
    steps:
      - name: Fetch Opsera Scan Logs
        id: fetch_logs
        run: |
          response=$(curl -s -X POST "https://app.opsera.io/api/v1/pipeline/logs" \
            -H "Authorization: Bearer ${{ secrets.OPSERA_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"pipelineId": "68232d25a85372e8342b3100", "runCount": "${{ env.run_count }}"}')
          
          if echo "$response" | jq . >/dev/null 2>&1; then
            logs=$(echo "$response" | jq -c '.logs // "No logs available"')
            echo "logs=$logs" >> $GITHUB_ENV
          else
            echo "Error: Unable to fetch logs. Exiting." >&2
            exit 1
          fi

  report-scan-result:
    needs: fetch-opsera-logs
    runs-on: ubuntu-latest
    steps:
      - name: Check if logs are available
        run: |
          if [ "${{ env.logs }}" == "No logs available" ]; then
            echo "‚ùå GitCustodian Scan Failed: No logs available"
            exit 1
          else
            echo "‚úÖ GitCustodian Scan Completed"
          fi

      - name: Save logs to file
        run: |
          echo '${{ env.logs }}' > gitscan-output.json

      - name: Create Detailed Scan Report
        run: |
          echo "### GitCustodian Scan Report" > scan-report.md
          echo "Pipeline ID: $GITHUB_RUN_ID" >> scan-report.md
          echo "Scan Status: Completed" >> scan-report.md
          echo "#### Detected Secrets:" >> scan-report.md

          jq -r '
            map(select(.tool_identifier == "consumer.summary"))[0]
            | .api_response.summaryReport.report[]
            | "- File: \(.path)\n  Line: \(.lineNumber)\n  Reason: \(.reason)\n  Commit: \(.commit)\n  Author: \(.author)\n"
          ' gitscan-output.json >> scan-report.md

          echo "#### End of Report" >> scan-report.md

      - name: Commit the Scan Report
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add scan-report.md
          git commit -m "Add GitCustodian scan report"
          git push

  comment-scan-result:
    needs: fetch-opsera-logs
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Post scan result comment on PR
        run: |
          curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"body\": \"üîç GitCustodian Scan Completed.\n\nView the full scan report in \`scan-report.md\`. ‚úÖ\"}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments"
